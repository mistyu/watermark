buildscript {
    ext.kotlin_version = '1.9.0'
    ext {
        // You can override these variables
        compileSdkVersion = 34
        minSdkVersion = 21 // 21 minimum
        playServicesLocationVersion = "20.0.0"
        exifInterfaceVersion = "1.3.4"
        namespace = "watermark_camera"
    }
    repositories {
       google()
       mavenCentral()
       maven { url 'https://jitpack.io' }
       maven { url 'https://maven.aliyun.com/repository/google' }
       maven { url 'https://maven.aliyun.com/repository/public' }
       maven { url 'https://maven.aliyun.com/repository/gradle-plugin' }
       maven { url 'https://developer.huawei.com/repo/' }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

allprojects {
    repositories {
       google()
       mavenCentral()
       maven { url 'https://jitpack.io' }
       maven { url 'https://maven.aliyun.com/repository/google' }
       maven { url 'https://maven.aliyun.com/repository/public' }
       maven { url 'https://maven.aliyun.com/repository/gradle-plugin' }
       maven { url 'https://developer.huawei.com/repo/' }
    }
}

rootProject.buildDir = '../build'


subprojects {
    project.buildDir = "${rootProject.buildDir}/${project.name}"
    afterEvaluate {
        android {
            compileSdkVersion 34
        }
    }
    afterEvaluate { project ->
        if (project.plugins.hasPlugin('com.android.library') || project.plugins.hasPlugin('com.android.application')) {
            println "project: ${project.name} Namespace get: ${project.android.namespace}"
            def manifestFile = project.android.sourceSets.main.manifest.srcFile
            def packageName = null
            
            if (manifestFile.exists()) {
                def manifestText = manifestFile.text
                def matcher = manifestText =~ /package="([^"]+)"/
                if (matcher.find()) {
                    packageName = matcher.group(1)
                }
            }
            
            if (!packageName) {
                packageName = project.group ?: "com.${project.name}"
            }
            
            project.android.namespace = packageName
            println "Namespace set to: ${packageName} for project: ${project.name}"
            
            println "Manifest file path: ${manifestFile.absolutePath}"
            println "Manifest exists: ${manifestFile.exists()}"
            if (manifestFile.exists()) {
                println "Manifest content: ${manifestFile.text}"
            }
        }
    }
}

subprojects {
    project.evaluationDependsOn(':app')
}

tasks.register("clean", Delete) {
    delete rootProject.buildDir
}


